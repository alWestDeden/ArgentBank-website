import { createSlice } from "@reduxjs/toolkit"

const initialState = {
	status: "void",
	newUserName: "",
	error: null,
	code: null,
}

export function modifyProfile(userName) {
	console.log(userName)
	// use a asynchronous thunk
	return async (dispatch, getState) => {
		const token = getState().login.token
		// check if any request allready pending
		console.log(token)
		const status = getState().modify.status
		if (status === "pending" || status === "updating") {
			return
		}
		// fetch API
		dispatch(actions.fetching())
		try {
			const response = await fetch(`http://localhost:3001/api/v1/user/profile`, {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
					Authorization: `Bearer ${token}`,
				},
				body: JSON.stringify(userName),
			})
			const data = await response.json()
			console.log(data)
			// wait a resolved (code 200) answer before creating a token variable
			const code = data.status
			console.log(code)
			if (code === 200) {
				// dispatch token
				dispatch(actions.resolved(userName))
			} else {
				// dispatch code to print an error message
				dispatch(actions.code(code))
			}
		} catch (error) {
			console.log(error)
			// dispatch error
			dispatch(actions.rejected(error))
		}
	}
}

const { actions, reducer } = createSlice({
	name: "modify",
	initialState,
	reducers: {
		fetching: {
			// change state status regarding previous state
			reducer: (draft) => {
				if (draft.status === "void") {
					draft.status = "pending"
					return
				}
				if (draft.status === "rejected") {
					draft.error = null
					draft.status = "pending"
					return
				}
				if (draft.status === "resolved") {
					draft.status = "updating"
					return
				}
			},
		},
		resolved: {
			// store the token, define the code as 200 (success) and the status to resolved
			reducer: (draft) => {
				if (draft.status === "pending" || draft.status === "updating") {
					draft.newUserName = actions.payload
					draft.code = 200
					draft.status = "resolved"
					return
				}
				return
			},
		},
		rejected: {
			// store the error message, pass the status to rejected and reinitialize the orthers states
			reducer: (draft, action) => {
				if (draft.status === "pending" || draft.status === "updating") {
					draft.error = action.payload.message
					draft.status = "rejected"
					return
				}
				return
			},
		},
		code: {
			// store the error code returned, pass the status to rejected and reinitialize the others states
			reducer: (draft, action) => {
				if (draft.status === "pending" || draft.status === "updating") {
					draft.code = action.payload
					draft.status = "rejected"
					return
				}
				return
			},
		},
		reset: {
			reducer: () => initialState,
		},
	},
})

export const { reset, resolved } = actions

export default reducer
